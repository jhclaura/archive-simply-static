<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>content &#8211; Laura Juo-Hsin Chen</title>
	<atom:link href="/tag/content/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>We are imaginative beasts.</description>
	<lastBuildDate>Fri, 20 Nov 2015 22:10:16 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<item>
		<title>Experiment_01</title>
		<link>/experiment_01/</link>
					<comments>/experiment_01/#respond</comments>
		
		<dc:creator><![CDATA[Laura]]></dc:creator>
		<pubDate>Wed, 11 Feb 2015 04:50:20 +0000</pubDate>
				<category><![CDATA[Thesis - MASK]]></category>
		<category><![CDATA[content]]></category>
		<category><![CDATA[dirty test]]></category>
		<guid isPermaLink="false">/?p=2262</guid>

					<description><![CDATA[Camera Feed For my first experiment, in order to create strong nonsense moment, I want to connect virtual world with the reality, so as to play with perception and make conflict, and one... <a class="read-more" href="/experiment_01/">Read The Rest &#8594;</a>]]></description>
										<content:encoded><![CDATA[<h1>Camera Feed</h1>
<p>For my first experiment, in order to create strong <em>nonsense moment</em>, I want to connect virtual world with the reality, so as to play with perception and make conflict, and one way to do this is importing the camera feed from the mobile phone. This way, the user can not only be able to <strong>see the real world</strong>, but also <strong>experience illogical, contradictory events in the virtual world</strong>, which is triggered by the real world.</p>
<h3>Possible scenario</h3>
<p><a href="http://itp.io/thesis/jhc551/wp-content/uploads/sites/617/2015/02/scenario_01a.png"><img loading="lazy" class="alignnone size-full wp-image-127" src="http://itp.io/thesis/jhc551/wp-content/uploads/sites/617/2015/02/scenario_01a.png" alt="scenario_01a" width="1000" height="271" /></a>&#8211;&gt; Contradict to reality<a href="http://itp.io/thesis/jhc551/wp-content/uploads/sites/617/2015/02/scenario_01b.png"><img loading="lazy" class="alignnone size-full wp-image-128" src="http://itp.io/thesis/jhc551/wp-content/uploads/sites/617/2015/02/scenario_01b.png" alt="scenario_01b" width="995" height="276" /></a> &#8211;&gt; Think everyone is monkey<a href="http://itp.io/thesis/jhc551/wp-content/uploads/sites/617/2015/02/scenario_01c.png"><img loading="lazy" class="alignnone size-full wp-image-129" src="http://itp.io/thesis/jhc551/wp-content/uploads/sites/617/2015/02/scenario_01c.png" alt="scenario_01c" width="1000" height="276" /></a> &#8211;&gt; Encourage to say Hi<a href="http://itp.io/thesis/jhc551/wp-content/uploads/sites/617/2015/02/scenario_01d.png"><img loading="lazy" class="alignnone size-full wp-image-130" src="http://itp.io/thesis/jhc551/wp-content/uploads/sites/617/2015/02/scenario_01d.png" alt="scenario_01d" width="1000" height="254" /></a>&#8211;&gt; Focus enhancement</p>
<p>&nbsp;</p>
<h3>Real + Virtual Mashup</h3>
<p><a href="http://itp.io/thesis/jhc551/wp-content/uploads/sites/617/2015/02/camFeed.png"><img loading="lazy" class="alignnone size-full wp-image-86" src="http://itp.io/thesis/jhc551/wp-content/uploads/sites/617/2015/02/camFeed.png" alt="camFeed" width="1000" height="563" /></a></p>
<p>After talking with professor Shawn Van Every, I decided to use browser instead of App as platform first, and test the limitation of browser and Javascript. With flexible HTML5 and Chrome browser, I can get camera feed from mobile just like from webcam of laptop, and <strong>getUserMedia</strong> &amp; <strong>MediaStreamTrack</strong> function of <strong>WebRTC</strong> API allow users to choose camera and set up constraints as they want. Below are the gists of it:</p>
<ul>
<li>Get the user/rear camera into video</li>
<li>Put into canvas; use the canvas as texture for plane geometry</li>
<li>Translate the position of geometry but keep the center of the plane mesh (geometry + material = mesh) on center</li>
<li>Rotate the mesh as rotating the camera (== user&#8217;s head rotation)</li>
</ul>
<p>&nbsp;</p>
<h3>Computer Vision on Phone</h3>
<p><a href="http://itp.io/thesis/jhc551/wp-content/uploads/sites/617/2015/02/camFeed_cv.png"><img loading="lazy" class="alignnone size-full wp-image-133" src="http://itp.io/thesis/jhc551/wp-content/uploads/sites/617/2015/02/camFeed_cv.png" alt="camFeed_cv" width="1000" height="580" /></a></p>
<p>Nonsense is built on sense, so in order to make nonsense in virtual world, the V World needs to know what&#8217;s going on in the real world, and my first attempt is using computer vision to analyze the image captured from camera. Below are the computer vision JS libraries I found:</p>
<ul>
<li>https://github.com/inspirit/jsfeat</li>
<li>http://trackingjs.com/</li>
<li>https://github.com/auduno/clmtrackr (face)</li>
<li>https://github.com/auduno/headtrackr (good for face)</li>
<li>https://github.com/sightmachine/simplecv-js</li>
<li>https://github.com/peterbraden/node-opencv</li>
<li>https://cloudcv.io/</li>
</ul>
<p><strong>Issue #1</strong> &#8211; Currently I used jsfeat to grayscale the footage first, and then found the bright area pixels by pixels. It&#8217;s obviously slow. Next step will be trying the combination of OpenCV and Node.js (Thanks to Pedro), see if &#8220;perform CPU-intense image processing routines in the cloud, let Node.js server handle client requests and call C++ back-end&#8221; will optimize the performance or not.</p>
<p><strong>Issue #2</strong> &#8211; Have to figure out how to translate the pixel location from canvas to 3D world, since let eyeScreen rotating with camera (head) making everything complicated.</p>
]]></content:encoded>
					
					<wfw:commentRss>/experiment_01/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
