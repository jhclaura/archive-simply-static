<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>toxiclibs &#8211; Laura Juo-Hsin Chen</title>
	<atom:link href="/tag/toxiclibs/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>We are imaginative beasts.</description>
	<lastBuildDate>Fri, 20 Nov 2015 22:23:56 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.2</generator>
	<item>
		<title>Triangulation!</title>
		<link>/triangulation/</link>
					<comments>/triangulation/#comments</comments>
		
		<dc:creator><![CDATA[Laura]]></dc:creator>
		<pubDate>Thu, 16 Jan 2014 17:06:22 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[ICM_Processing]]></category>
		<category><![CDATA[ohyay]]></category>
		<category><![CDATA[processing]]></category>
		<category><![CDATA[toxiclibs]]></category>
		<category><![CDATA[triangulation]]></category>
		<category><![CDATA[video]]></category>
		<guid isPermaLink="false">/?p=677</guid>

					<description><![CDATA[Triangulation.. Finally! Want it so bad for a semester. Luckily having a winter break to do it. Have a lot of rooms for improvement but still, one step further! *UPDATE*(in... <a class="read-more" href="/triangulation/">Read The Rest &#8594;</a>]]></description>
										<content:encoded><![CDATA[<p style="font-family: HelveticaNeue, Arial, 'Helvetica Neue', Helvetica, FreeSans, 'Liberation Sans', 'Nimbus Sans L', sans-serif; font-style: normal;">Triangulation.. Finally! Want it so bad for a semester. Luckily having a winter break to do it. Have a lot of rooms for improvement but still, one step further!</p>
<h3 style="font-family: HelveticaNeue, Arial, 'Helvetica Neue', Helvetica, FreeSans, 'Liberation Sans', 'Nimbus Sans L', sans-serif; font-style: normal;"><span style="color: #ff3366;">*UPDATE*(in the middle of writing this post UGH)</span></h3>
<p style="font-family: HelveticaNeue, Arial, 'Helvetica Neue', Helvetica, FreeSans, 'Liberation Sans', 'Nimbus Sans L', sans-serif; font-size: 14px; font-style: normal; font-variant: normal; line-height: 21px;"><strong>New version.</strong> Normal speed!</p>
<p style="font-family: HelveticaNeue, Arial, 'Helvetica Neue', Helvetica, FreeSans, 'Liberation Sans', 'Nimbus Sans L', sans-serif; font-size: 14px; font-style: normal; font-variant: normal; line-height: 21px;"><iframe loading="lazy" src="//player.vimeo.com/video/84282840?color=c9ff23" height="585" width="800" allowfullscreen="" frameborder="0"></iframe></p>
<p style="font-family: HelveticaNeue, Arial, 'Helvetica Neue', Helvetica, FreeSans, 'Liberation Sans', 'Nimbus Sans L', sans-serif; font-size: 14px; font-style: normal; font-variant: normal; line-height: 21px;">In the middle of documentation, the ill performance, both low speed running and wrong color picking bothered me a lot, so I went through the whole codes again and making adjustment around. And then I found out what the problem is! It&#8217;s the <span style="text-decoration: underline; color: #17e8be;"><strong>random plotting of points</strong></span> for triangles! It not only slows down the process, but also causes the ill performance of choosing the right color for the triangle. OH YEAH SO HAPPY. It&#8217;s the similar &#8220;bitter yet sweet moment&#8221; I usually will have when coding&#8230; I think I&#8217;m ready for the new semester!</p>
<p style="font-family: HelveticaNeue, Arial, 'Helvetica Neue', Helvetica, FreeSans, 'Liberation Sans', 'Nimbus Sans L', sans-serif; font-size: 14px; font-style: normal; font-variant: normal; line-height: 21px;"><strong>Old version.</strong> x3 speed! Slow and chaos.</p>
<p style="font-family: HelveticaNeue, Arial, 'Helvetica Neue', Helvetica, FreeSans, 'Liberation Sans', 'Nimbus Sans L', sans-serif; font-size: 14px; font-style: normal; font-variant: normal; line-height: 21px;"><iframe loading="lazy" src="//player.vimeo.com/video/84256296?color=c9ff23" height="585" width="800" allowfullscreen="" frameborder="0"></iframe></p>
<p style="font-family: HelveticaNeue, Arial, 'Helvetica Neue', Helvetica, FreeSans, 'Liberation Sans', 'Nimbus Sans L', sans-serif; font-size: 14px; font-style: normal; font-variant: normal; line-height: 21px;"><strong>Old Line version.</strong> Slow but it seems to have better outcome with the random plotting points methods!!</p>
<p><iframe loading="lazy" src="//player.vimeo.com/video/84251593?color=c9ff23" height="585" width="800" allowfullscreen="" frameborder="0"></iframe></p>
<p>&nbsp;</p>
<p><strong>Image Gallery</strong></p>
<p><img loading="lazy" class="aligncenter size-full wp-image-701" alt="colorV20252" src="/wp-content/uploads/2014/01/colorV20252.jpg" width="720" height="480" srcset="/wp-content/uploads/2014/01/colorV20252.jpg 720w, /wp-content/uploads/2014/01/colorV20252-300x200.jpg 300w" sizes="(max-width: 720px) 100vw, 720px" /><a href="/wp-content/uploads/2014/01/line544.jpg"><img loading="lazy" class="aligncenter size-full wp-image-681" alt="line544" src="/wp-content/uploads/2014/01/line544.jpg" width="720" height="480" srcset="/wp-content/uploads/2014/01/line544.jpg 720w, /wp-content/uploads/2014/01/line544-300x200.jpg 300w" sizes="(max-width: 720px) 100vw, 720px" /></a><a href="/wp-content/uploads/2014/01/outcome06.jpg"><img loading="lazy" class="aligncenter size-large wp-image-696" alt="outcome06" src="/wp-content/uploads/2014/01/outcome06.jpg" width="1000" height="336" srcset="/wp-content/uploads/2014/01/outcome06.jpg 1000w, /wp-content/uploads/2014/01/outcome06-300x100.jpg 300w" sizes="(max-width: 1000px) 100vw, 1000px" /></a> <a href="/wp-content/uploads/2014/01/outcome01.jpg"><img loading="lazy" class="aligncenter size-full wp-image-691" alt="outcome01" src="/wp-content/uploads/2014/01/outcome01.jpg" width="1000" height="500" srcset="/wp-content/uploads/2014/01/outcome01.jpg 1000w, /wp-content/uploads/2014/01/outcome01-300x150.jpg 300w" sizes="(max-width: 1000px) 100vw, 1000px" /></a> <a href="/wp-content/uploads/2014/01/outcome04.jpg"><img loading="lazy" class="aligncenter size-large wp-image-694" alt="outcome04" src="/wp-content/uploads/2014/01/outcome04.jpg" width="1000" height="751" srcset="/wp-content/uploads/2014/01/outcome04.jpg 1000w, /wp-content/uploads/2014/01/outcome04-300x225.jpg 300w" sizes="(max-width: 1000px) 100vw, 1000px" /></a> <a href="/wp-content/uploads/2014/01/outcome02.jpg"><img loading="lazy" class="aligncenter size-full wp-image-692" alt="outcome02" src="/wp-content/uploads/2014/01/outcome02.jpg" width="1000" height="340" srcset="/wp-content/uploads/2014/01/outcome02.jpg 1000w, /wp-content/uploads/2014/01/outcome02-300x102.jpg 300w" sizes="(max-width: 1000px) 100vw, 1000px" /></a> <a href="/wp-content/uploads/2014/01/outcome03.jpg"><img loading="lazy" class="aligncenter size-full wp-image-693" alt="outcome03" src="/wp-content/uploads/2014/01/outcome03.jpg" width="1000" height="751" srcset="/wp-content/uploads/2014/01/outcome03.jpg 1000w, /wp-content/uploads/2014/01/outcome03-300x225.jpg 300w" sizes="(max-width: 1000px) 100vw, 1000px" /></a> <a href="/wp-content/uploads/2014/01/outcome05.jpg"><img loading="lazy" class="aligncenter size-full wp-image-695" alt="outcome05" src="/wp-content/uploads/2014/01/outcome05.jpg" width="1000" height="336" srcset="/wp-content/uploads/2014/01/outcome05.jpg 1000w, /wp-content/uploads/2014/01/outcome05-300x100.jpg 300w" sizes="(max-width: 1000px) 100vw, 1000px" /></a> <a href="/wp-content/uploads/2014/01/outcome07.jpg"><img loading="lazy" class="aligncenter size-full wp-image-697" alt="outcome07" src="/wp-content/uploads/2014/01/outcome07.jpg" width="1000" height="284" srcset="/wp-content/uploads/2014/01/outcome07.jpg 1000w, /wp-content/uploads/2014/01/outcome07-300x85.jpg 300w" sizes="(max-width: 1000px) 100vw, 1000px" /></a></p>
<p>&nbsp;</p>
<p><strong>Basic idea of code</strong></p>
<ol>
<li>capture image from webcam and save as PImage <em>source</em></li>
<li>iterate through source, pick up every pixel, compare either <span style="text-decoration: underline;">a) colors</span> or <span style="text-decoration: underline;">b) brightness</span> difference(I found comparing by colors will be more accurate).</li>
<li>if the difference is bigger than certain threshold, plant a point in class <em>Voronoi. </em>Voronoi does all the calculation to transform points into triangles.</li>
<li>for each triangle gotten out from Voronoi, using getCentroid() to pickup the color to fill the triangle built up with beginShape(), endShape() and vertex().</li>
<li>wipe out Voronoi and build a new one every 10 frames to speed up the performance.</li>
</ol>
<p>&nbsp;</p>
<p><strong>References</strong></p>
<ul>
<li>from <a href="http://robbietilton.com/blog/?p=607" target="_blank">Robbie Tilton</a>. ITP alumnus! This is where my base came from! Clear description made me not afraid of trying the code out! From him, I got the idea of using Cols and Rows to boost up the performance, and plotting points for triangles with a random deviation of 5 pixels to make it look less grid-like(<span style="text-decoration: underline; color: #000000;"><span style="text-decoration: underline;">BUT randomness is not good for picking color, and it also slows down the performance</span></span>).</li>
<li><span style="font-size: 1em;">from </span><a style="font-size: 1em;" href="http://vormplus.be/blog/article/voronoi-paintings-with-toxiclibs" target="_blank">Jan Vantomme</a><span style="font-size: 1em;">. Very well documentation! From him, I learned the difference between getCentroid() and getSites(), and also learned that, since getCentroid() and getSites() don’t return the voronoi regions and points in same order, to fill the right color for right position it has to be looped to iterate through, picking and filling up the color at the same time.</span></li>
</ul>
<p>&nbsp;</p>
<p><strong>Inspiration &amp; Further</strong></p>
<ul>
<li>amazing <a href="http://www.fastcodesign.com/1672028/algorithmic-portraits-reimagine-faces-as-software#1" target="_blank">algorithmic portraits</a> by Diana Lange.</li>
<li>triangulation <a href="http://learn.postspectacular.com/hg/bezalel-2011-delaunayunwrap/" target="_blank">tools</a> done by <a href="http://www.flickr.com/photos/toxi/5639608667/in/set-72157626419717867" target="_blank">Bezalel workshop</a>, so complicated yet the outcomes are so gorgeous.</li>
<li><a href="http://hemesh.wblut.com/" target="_blank">hemesh</a> &#8211;&gt; being able to make 3D triangulation mesh(printable too)</li>
</ul>
<p>&nbsp;</p>
<p><strong>Code</strong>, as below: <span id="more-677"></span></p>
<pre class="brush: java; gutter: true">//references:
//http://www.processing.org/tutorials/pixels/
//http://robbietilton.com/blog/?p=607
//http://vormplus.be/blog/article/voronoi-paintings-with-toxiclibs

import toxi.geom.*;
import toxi.geom.mesh2d.*; 
import toxi.util.*;
import toxi.util.datatypes.*; 
import toxi.processing.*;
import processing.video.*;

Capture video;
float size = 10000;
Voronoi voronoi;
PImage source;

int pointDensity = 70;
int cols, rows;
int x, y;
int numPixels;
float colorThreshold = 30;

void setup() {
  size(640,480);
  //size(source.width, source.height);
  video = new Capture(this, width, height);
  video.start();

  //source = loadImage(&quot;test.png&quot;);
  source = createImage(640,480,RGB);
  smooth();

  cols = width/pointDensity;
  rows = height/pointDensity;
  numPixels = source.width * source.height;

  voronoi = new Voronoi(size);

}

void addPoint() {
  source.copy(video,0,0,640,480,0,0,640,480);
  source.updatePixels();

  for (x=1; x&lt;source.width; x+=cols) {
    for (y=1; y&lt;source.height; y+=rows) {       int loc = x + y*source.width;       color pix = source.pixels[loc];              int leftLoc = (x-1) + (y-1)*source.width;       color leftPix = source.pixels[leftLoc];              // compare ver: color       float r1 = red(pix); float g1 = green(pix); float b1 = blue(pix);       float r2 = red(leftPix); float g2 = green(leftPix); float b2 = blue(leftPix);       float diff = dist(r1,g1,b1,r2,g2,b2);              // compare ver: brightness //      float diff = abs(brightness(pix)-brightness(leftPix));       if (diff &gt; colorThreshold) {
//        voronoi.addPoint(new Vec2D(x+random(-2, 2), y+random(-2, 2)));
        voronoi.addPoint(new Vec2D(x, y));
      }
    }
  }
}  

void drawTriangle(){

  for (Triangle2D t : voronoi.getTriangles()) {
    color pix;

    // use Centroid&#039;s color
    Vec2D locVec = t.computeCentroid();
    int loc = (int)((locVec.x) + (locVec.y)*source.width);

    pix = source.pixels[constrain(loc,0,numPixels-1)];
//    stroke(pix,100);
    fill(pix);
//    noFill();
    noStroke();

    beginShape(TRIANGLES);
    stroke(pix);
//    strokeWeight(.1);
    vertex(t.a.x, t.a.y);
    vertex(t.b.x, t.b.y);
    vertex(t.c.x, t.c.y);
    endShape();    
  }
}

void draw() {
  background(255);
  video.read();
  //image(video,0,0);

  if(showImg) {
    image(source, 0, 0);
  } else {
    addPoint(); 
    drawTriangle();
  }

  fill(0);  
  rect(15,5,30,20);

  // show frame rate
  fill(255);
  text(int(frameRate), 20, 20);

  updatePixels();

  if (frameCount%10 == 0)
    voronoi = new Voronoi(size);

}

boolean showImg = false;
boolean saveImg = false;

void keyPressed() {
  if(key == &#039;i&#039;)
    showImg = !showImg;
}</pre>
]]></content:encoded>
					
					<wfw:commentRss>/triangulation/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
	</channel>
</rss>
